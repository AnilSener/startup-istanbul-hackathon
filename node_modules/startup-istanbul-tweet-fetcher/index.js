var Twit = require('twit');
var mongoose = require('mongoose');
var async = require('async');
var locations = require('./locations.json');


var CountrySchema = new mongoose.Schema({
	
	twitterId:String,
	
	name:String,
	
	code:String,
	
	lat:String,
	
	lng:String
	
});

var TweetSchema = new mongoose.Schema({
		
	twitterId:String,
	
	text:String,
	
	user:String,
	
	createdAt:Date,
	
	savedAt:{
		type:Date,
		default:Date.now
	},
	
	country:{
		twitterId:String,
		name:String,
		code:String,
	},
	
	sentiment:{
		type:Number,
		default:0
	},
	
	calculated:{
		type:Boolean,
		default:false
	}
});

var Tweet = mongoose.model('tweet',TweetSchema);

var Country = mongoose.model('country',CountrySchema);

module.exports = function(options){
	
	var twit = new Twit(options.twitter);
	
	function twitRequest(url,query,callback){
		
		twit.get(url,query,function(err,data,response){
			
			if(err && err.code == 34){
			
				callback(err,data,response);
				
			}else{
			
				var remaining = response.headers['x-rate-limit-remaining'];
				var seconds = response.headers['x-rate-limit-reset'];
				
				if(remaining == 0){
					var wait =  (seconds - ((new Date()).getTime()/1000)) * 1000 ;
					
					console.log('waiting until rate limit reset: ' + wait + ' milliseconds');
					
					setTimeout(twitRequest,wait,url,query,callback);
					
					
				}else{
				
					callback(err,data,response);
				}
			}
		});
	}
	
	function fetchLocation(lat,lng,callback){
		
		twitRequest('geo/reverse_geocode',{
			
			lat:lat,
			long:lng,
			granularity:'country',
			count:1
			
		},function(err,data,response){
		
			if(data){
			
				callback(err,data.result.places[0]);
				
			}else{
			
				callback(err);
			}
		});
	}
	
	function searchByLocation(locationId,callback){
		
		twitRequest('search/tweets',{
			
			q:'place:'+locationId,
			count:100,
			include_entities:false,
			result_type:options.result,
		},function(err,data,response){
			if(data){
			
				callback(err,data.statuses);
				
			}else{
			
				callback(err,[]);
			}
		});
	}
	
	function saveTweets(place,tweets,callback){
	
		var savedCount = 0;
	
		tweets.forEach(function(tweet){
			
			Tweet.findOne({twitterId:tweet.id_str},function(err,foundModel){
				
				if(!foundModel){
					
					/* calculate sentiment */
					
					Tweet.create({
						twitterId:tweet.id_str,
						text:tweet.text,
						createdAt:tweet.created_at,
						user:tweet.user.id_str,
						country:{
							twitterId:place.id_str,
							name:place.country,
							code:place.country_code
						}
					});
					
					savedCount++;
				}
				
				callback(err,savedCount);
			});
		});
	}
	
	function saveCountry(loc,callback){
		
		Country.findOne({
		
			lat:loc.lat,
			lng:loc.lng
			
		},function(err,foundCountry){
		
			if(!foundCountry){
				
				console.log('fetching country');
				
				fetchLocation(loc.lat,loc.lng,function(err,place){
					
					if(err){
						console.log(err);
					}
					
					if(place){
						
						console.log('country found: ' + place.country);
							
						var country = new Country({
							twitterId:place.id,
							name:place.country,
							code:place.country_code,
							lat:loc.lat,
							lng:loc.lng
							
						}).save(function(err,country){
							
							console.log('country saved');
							setTimeout(callback,options.requestInterval,err);
						});
						
					}else{
					
						console.log('country not found');
						
						var country = new Country({
							twitterId:"0",
							lat:loc.lat,
							lng:loc.lng
							
						}).save(function(err,country){
							
							console.log('dummy country saved');
							setTimeout(callback,options.requestInterval,err);
						});
						
						callback();
					}
				});
				
			}else{
				
				console.log('country exists: ' + foundCountry.name);
				callback();
			}
		});
	}
	
	function saveCountries(){
		async.mapLimit(locations,1, saveCountry);
	}
	
	function fetchTweets(country,callback){
		
		console.log('searching tweets: ' + country.name);
		
		searchByLocation(country.twitterId,function(err,tweets){
			
			if(!err && tweets.length > 0){
				
				console.log('found ' + tweets.length + ' tweets. Saving..');
				
				saveTweets(place,tweets,function(err,count){
					
					if(!err){
						console.log('saved ' + count + ' tweets.');
					}
				});
			}else{
				console.log('Not found any tweets');
			}
		});
	}

	return {
		
		saveCountries:function(){
		
			mongoose.connect(options.mongodb,function(){
		
				console.log('mongodb connected');
				
				saveCountries();
			});
		},
		
		fetchTweets:function(){
			mongoose.connect(options.mongodb,function(){
		
				console.log('mongodb connected');
				
				(function fetch(){
					
					Country.find({},function(err,countries){
							
						async.mapLimit(countries,1,fetchTweets);
						
					});
					
					setTimeout(fetch,options.interval);
				})();
			});
		}
	};

}
